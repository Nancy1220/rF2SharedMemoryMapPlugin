title rF2 Shared Memory HWControl

participant "Active client" as Client


database "Named mutex" as Mutex

database HWControl SM

participant rF2SMM
participant rFactor

note left of rFactor://Created with \nhttps://sequencediagram.org//
Mutex<-rF2SMM:Create mutex
HWControl SM<-rF2SMM:Create shared memory
Client->Mutex:Seize mutex
Client<-HWControl SM:Read busy flag\n== "Idle"

Client->HWControl SM:Set busy flag = "Request"
Client->HWControl SM:Write control name string to shared memory
Client->Mutex:Release mutex
rF2SMM<-rFactor:Calls HWControl()

HWControl SM->rF2SMM:Read busy flag\n== "Request"
HWControl SM->rF2SMM:Read "HWControl" string
note over rF2SMM://When the string matches//
Mutex<-rF2SMM:Seize mutex
HWControl SM<-rF2SMM:Set busy flag = "Operated"
Mutex<-rF2SMM:Release mutex
rF2SMM->rFactor:return (True,1) (control operated)
rF2SMM<-rFactor:Calls HWControl()
HWControl SM->rF2SMM:Read Busy flag\n== "Operated"
HWControl SM->rF2SMM:Read "HWControl" string
note over rF2SMM://When the string matches\na second time//
Mutex<-rF2SMM:Seize mutex
HWControl SM<-rF2SMM:Set busy flag = "Idle"
Mutex<-rF2SMM:Release mutex
rF2SMM->rFactor:return (True,0) (control release)

Client<-HWControl SM:Check busy flag
note over Client://When it's "Idle" it\nknows control has\nbeen operated//